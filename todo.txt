
document.addEventListener('DOMContentLoaded', () => {
    const treeTypeSelect = document.getElementById('treeType');
    const windSpeedSlider = document.getElementById('windSpeed');
    const windSpeedValue = document.getElementById('windSpeedValue');
    const windSpeedDisplay = document.getElementById('windSpeedDisplay');
    const windDirectionSlider = document.getElementById('windDirection');
    const windDirectionValue = document.getElementById('windDirectionValue');
    const windDirectionDisplay = document.getElementById('windDirectionDisplay');
    const precipitationSlider = document.getElementById('precipitation');
    const precipitationValue = document.getElementById('precipitationValue');
    const precipitationDisplay = document.getElementById('precipitationDisplay');
    const frontalAreaDensitySlider = document.getElementById('frontalAreaDensity');
    const frontalAreaDensityValue = document.getElementById('frontalAreaDensityValue');

    const windSpeedHand = document.getElementById('windSpeedHand');
    const windDirectionHand = document.getElementById('windDirectionHand');
    const precipitationHand = document.getElementById('precipitationHand');

    const house = document.getElementById('house');
    const tree = document.getElementById('tree');

    // Constants
    const constants = {
        momentumAbsorption: {
            oak: 1,
            pine: 0.8,
            palm: 0.5
        },
        airDensity: 1
    };

    // The code for updating the sliders value
    windSpeedSlider.addEventListener('input', () => {
        windSpeedValue.textContent = windSpeedSlider.value;
        windSpeedDisplay.textContent = ${windSpeedSlider.value} mph;
        updateAnimation();
        updateMeter(windSpeedSlider.value, 'windSpeed');
    });

    windDirectionSlider.addEventListener('input', () => {
        windDirectionValue.textContent = windDirectionSlider.value;
        windDirectionDisplay.textContent = convertDirection(windDirectionSlider.value);
        updateAnimation();
        updateMeter(windDirectionSlider.value, 'windDirection');
    });

    precipitationSlider.addEventListener('input', () => {
        precipitationValue.textContent = precipitationSlider.value;
        precipitationDisplay.textContent = ${precipitationSlider.value} in/h;
        updateAnimation();
        updateMeter(precipitationSlider.value, 'precipitation');
    });

    frontalAreaDensitySlider.addEventListener('input', () => {
        frontalAreaDensityValue.textContent = ${frontalAreaDensitySlider.value}%;
        updateAnimation();
    });

    treeTypeSelect.addEventListener('change', () => {
        updateAnimation();
    });

    function updateAnimation() {
        const treeType = treeTypeSelect.value;
        const windSpeed = windSpeedSlider.value;
        const windDirection = windDirectionSlider.value;
        const frontalAreaDensity = frontalAreaDensitySlider.value;

        // Calculate momentum absorption
        const momentumAbsorption = constants.momentumAbsorption[treeType];
        const momentum = windSpeed * constants.airDensity * frontalAreaDensity / 100 * momentumAbsorption;

        // Calculate sway values
        const swayAngle = windSpeed / 10;
        const swayX = Math.cos(windDirection * Math.PI / 180) * windSpeed / 2;
        const swayY = Math.sin(windDirection * Math.PI / 180) * windSpeed / 2;

        // Get individual parts of the tree
        const leaves = document.querySelectorAll('#tree .leaves');
        const branches = document.querySelectorAll('#tree .branches');
        const trunk = document.querySelector('#tree .trunk');

        // Animate leaves
        gsap.to(leaves, {
            rotation: swayAngle * 1.5,
            x: swayX * 1.5,
            y: swayY * 1.5,
            duration: 1,
            ease: 'power1.inOut',
            yoyo: true,
            repeat: -1
        });

        // Animate branches
        gsap.to(branches, {
            rotation: swayAngle,
            x: swayX,
            y: swayY,
            duration: 1.5,
            ease: 'power1.inOut',
            yoyo: true,
            repeat: -1
        });

        // Animate trunk
        gsap.to(trunk, {
            rotation: swayAngle / 2,
            x: swayX / 2,
            y: swayY / 2,
            duration: 2,
            ease: 'power1.inOut',
            yoyo: true,
            repeat: -1
        });
    }

    function updateMeter(value, type) {
        let angle = (value / 100) * 180;
        if (type === 'windSpeed') {
            windSpeedHand.setAttribute('transform', rotate(${angle}, 50, 50));
        } else if (type === 'windDirection') {
            windDirectionHand.setAttribute('transform', rotate(${angle}, 50, 50));
        } else if (type === 'precipitation') {
            precipitationHand.setAttribute('transform', rotate(${angle}, 50, 50));
        }
    }

    function convertDirection(value) {
        const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];
        const index = Math.round(value / 22.5) % 16;
        return directions[index];
    }

    updateAnimation(); // Initial call to set the animation
});
The code provided doesnt swing the trees (sway them, i want the swaing to be more realistic and more 3D)
Now i also want thr protection stuufs to be done acording to the project docs


also suggest me a good 3D option that will fit this project using vanilla js so as to make the lansacape i used 3d as well as the trees
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wind Impact Simulation</title>
    <link rel="stylesheet" href="css/style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.10.4/gsap.min.js"></script>
</head>
<body class="">
    <div class="container overflow-x-hidden">
        <div class="animation-container">
            <img id="landscape" src="static/land.jpeg" alt="Landscape">
            <!-- Embedded SVG content -->
            <div id="tree-container">
                <!-- Add SVG content here from pine.svg -->
                <svg id="tree" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64">
                    <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
     viewBox="0 0 426.707 308.287" style="enable-background:new 0 0 426.707 308.287;" xml:space="preserve">

</svg>

                </svg>
            </div>
            <img id="house" src="house.png" alt="House">
        </div>
        <div class="controls flex-col md:flex-row">
            <div class="controls">
                <div class="control-group">
                <label for="treeType">Tree Type:</label>
                <select id="treeType">
                    <option value="oak">Oak</option>
                    <option value="pine">Pine</option>
                    <option value="palm">Palm</option>
                </select>
            </div>
            <div class="control-group">
                <label for="windSpeed">Wind Speed (km/h):</label>
                <input type="range" id="windSpeed" min="0" max="120" value="0">
                <span id="windSpeedValue">0</span>
            </div>    
            </div>
            <div class="controls">
                <div class="control-group">
                <label for="windDirection">Wind Direction:</label>
                <input type="range" id="windDirection" min="0" max="360" value="0">
                <span id="windDirectionValue">0</span>
            </div>
            <div class="control-group">
                <label for="precipitation">Precipitation:</label>
                <input type="range" id="precipitation" min="0" max="100" value="0">
                <span id="precipitationValue">0</span>
            </div>

            </div>
            <div class="controls">
                <div class="control-group">
                <label for="frontalAreaDensity">Frontal Area Density:</label>
                <input type="range" id="frontalAreaDensity" min="0" max="100" value="80">
                <span id="frontalAreaDensityValue">80%</span>
            </div>    
            </div>
            
        </div>
        <div id="protectionOptions" class="hidden mb-8">
            <div class="">
                <h2>Tree Protection Options</h2>    
            </div>
            <div class="space-x-3 space-y-3">
                <button id="pruning">Tree trimming/pruning</button>
                <button id="copperWire">Installing copper wire</button>
                <button id="mulching">Creating a ring of tree leaves/sticks</button>
                <button id="magnifyingGlass">Using a magnifying glass</button>
            </div>
        </div>
         <div class="md:dashboard flex flex-wrap justify-center items-center gap-5 md:justify-around md:gap-x-16">
            <div class="dashboard-item">
                <span>WIND SPEED</span>
                <div class="meter">
                    <svg viewBox="0 0 100 100">
                        <circle cx="50" cy="50" r="45" class="meter-bg" />
                        <line x1="50" y1="50" x2="50" y2="10" id="windSpeedHand" class="meter-hand" />
                        <circle cx="50" cy="50" r="2" fill="#05ee52" />
                    </svg>
                    <div id="windSpeedDisplay">0 mph</div>
                </div>
            </div>
            <div class="dashboard-item">
                <span>WIND DIRECTION</span>
                <div class="meter">
                    <svg viewBox="0 0 100 100">
                        <circle cx="50" cy="50" r="45" class="meter-bg" />
                        <line x1="50" y1="50" x2="50" y2="10" id="windDirectionHand" class="meter-hand" />
                        <circle cx="50" cy="50" r="2" fill="#ff0000" />
                    </svg>
                    <div id="windDirectionDisplay">N</div>
                </div>
            </div>
            <div class="dashboard-item">
                <span>PRECIPITATION</span>
                <div class="meter">
                    <svg viewBox="0 0 100 100">
                        <circle cx="50" cy="50" r="45" class="meter-bg" />
                        <line x1="50" y1="50" x2="50" y2="10" id="precipitationHand" class="meter-hand" />
                        <circle cx="50" cy="50" r="2" fill="#ff0000" />
                    </svg>
                    <div id="precipitationDisplay">0 in/h</div>
                </div>
            </div>
        </div>
    </div>
    <script src="js/main.js"></script>
</body>
</html>